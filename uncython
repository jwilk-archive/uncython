#!/usr/bin/env python3

# Copyright © 2012 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import collections
import os
import re
import sys

extract_comments = re.compile(br'''
^ [ ]* /[*] [ ] "([^"]+)":([0-9]+) $
( .*? )
^ [ ][*]/ $
''', re.VERBOSE | re.MULTILINE | re.DOTALL).finditer

parse_marker = re.compile(br'''
^ ( .*? ) \s+ [#] [  ] <<<<<<<<<<<<<< $
''', re.VERBOSE).match

def sanitize_path(path):
    if os.path.__name__ != 'posixpath':
        raise NotImplementedError
    path = os.path.join('/', path)
    path = os.path.normpath(path)
    return path.lstrip('/')

class RecoveryError(Exception):
    pass

def main():
    stdout = sys.stdout.buffer
    ap = argparse.ArgumentParser()
    ap.add_argument('cfiles', metavar='CFILE', nargs='+')
    ap.add_argument('-d', '--destdir', metavar='DESTDIR', required=True)
    options = ap.parse_args()
    sources = collections.defaultdict(dict)
    for cpath in options.cfiles:
        with open(cpath, 'rb') as cfile:
            contents = cfile.read()
        for match in extract_comments(contents):
            pyxpath, n, lines = match.groups()
            pyxpath = pyxpath.decode('ASCII')
            pyxpath = sanitize_path(pyxpath)
            source = sources[pyxpath]
            n = int(n)
            lines = lines.splitlines()
            local_code = []
            for m, line in enumerate(lines):
                if not line.startswith(b' * '):
                    continue
                line = line[3:]
                match = parse_marker(line)
                if match is not None:
                    line = match.group(1)
                    k = m
                local_code += [line]
            if k is None:
                raise RecoveryError
            for m, line in enumerate(local_code, n - k):
                if m < 0:
                    raise RecoveryError
                try:
                    if source[m] != line:
                        raise RecoveryError
                except KeyError:
                    source[m] = line
    for pyxpath, source in sources.items():
        pyxdir = os.path.dirname(pyxpath)
        os.makedirs(pyxdir, exist_ok=True)
        with open(pyxpath, 'wb') as pyxfile:
            i = 0
            while source:
                line = source.pop(i, b'# <uncython could not extract this line>')
                pyxfile.write(line)
                pyxfile.write(b'\n')
                i += 1

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
